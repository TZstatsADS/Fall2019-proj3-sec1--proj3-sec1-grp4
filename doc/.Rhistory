info <- read.csv("../data/train_set/label.csv")
setwd("~/Desktop/GitHub/Fall2019-proj3-sec1--proj3-sec1-grp4/doc")
info <- read.csv("../data/train_set/label.csv")
info <- read.csv("../data/train_set/label.csv")
load("../output/fiducial_pt_list.Rdata")
install.packages(c("caret", "R.matlab"))
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if(!require("EBImage")){
BiocManager::install("EBImage")
}
if(!require("R.matlab")){
install.packages("R.matlab")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("dplyr")){
install.packages("dplyr")
}
if(!require("readxl")){
install.packages("readxl")
}
if(!require("ggplot2")){
install.packages("ggplot2")
}
if(!require("caret")){
install.packages("caret")
}
library(R.matlab)
library(readxl)
library(dplyr)
library(EBImage)
library(ggplot2)
library(caret)
set.seed(0)
setwd("/Users/HenryZhou/Desktop/GitHub/Fall2019-proj3-sec1--proj3-sec1-grp4/doc/")
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
# use relative path for reproducibility
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
k = c(5,11,21,31,41,51)
model_labels = paste("KNN with K =", k)
?round
View(info)
n_files <- length(list.files(train_image_dir))
n_files <- length(list.files(train_image_dir))
image_list <- list()
for(i in 1:100){
image_list[[i]] <- readImage(paste0(train_image_dir, sprintf("%04d", i), ".jpg"))
}
#function to read fiducial points
#input: index
#output: matrix of fiducial points corresponding to the index
readMat.matrix <- function(index){
return(round(readMat(paste0(train_pt_dir, sprintf("%04d", index), ".mat"))[[1]],0))
}
#load fiducial points
fiducial_pt_list <- lapply(1:n_files, readMat.matrix)
save(fiducial_pt_list, file="../output/fiducial_pt_list.RData")
source("../lib/feature.R")
dist(1:5)
as.vector(dist(1:5))
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
}
#train-test split
info <- read.csv(train_label_path)
n <- nrow(info)
n_train <- round(n*(4/5), 0)
train_idx <- sample(info$Index, n_train, replace = F)
test_idx <- setdiff(info$Index,train_idx)
set.seed(0)
setwd("/Users/HenryZhou/Desktop/GitHub/Fall2019-proj3-sec1--proj3-sec1-grp4/doc/")
# here replace it with your own path or manually set it in RStudio to where this rmd file is located.
# use relative path for reproducibility
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
k = c(5,11,21,31,41,51)
model_labels = paste("KNN with K =", k)
#train-test split
info <- read.csv(train_label_path)
n <- nrow(info)
n_train <- round(n*(4/5), 0)
train_idx <- sample(info$Index, n_train, replace = F)
test_idx <- setdiff(info$Index,train_idx)
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
}
tm_feature_test <- NA
if(run.feature.train){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
}
save(dat_train, file="../output/feature_train.RData")
save(dat_test, file="../output/feature_test.RData")
tm_feature_test
tm_feature_train
View(dat_test)
a = fiducial_pt_list[[1]]
View(a)
library(e1071)
colnames(dat_test)
dat_test[,'categoryID']
#source("../lib/train.R") Since knn does not need to train, I comment this line.
source("../lib/test_knn.R")
source("../lib/cross_validation_knn.R")
if(run.cv){
err_cv <- matrix(0, nrow = length(k), ncol = 2)
for(i in 1:length(k)){
cat("k=", k[i], "\n")
err_cv[i,] <- cv.function(dat_train, K, k[i])
save(err_cv, file="../output/err_cv.RData")
}
}
source("../lib/cross_validation_knn.R")
k <- c(3, 5, 7)
if(run.cv){
err_cv <- matrix(0, nrow = length(k), ncol = 2)
for(i in 1:length(k)){
cat("k=", k[i], "\n")
err_cv[i,] <- cv.function(dat_train, K, k[i])
save(err_cv, file="../output/err_cv.RData")
}
}
if(run.cv){
load("../output/err_cv.RData")
err_cv <- as.data.frame(err_cv)
colnames(err_cv) <- c("mean_error", "sd_error")
err_cv$k = as.factor(k)
err_cv %>%
ggplot(aes(x = k, y = mean_error,
ymin = mean_error - sd_error, ymax = mean_error + sd_error)) +
geom_crossbar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
}
if(run.cv){
model_best <- k[which.min(err_cv[,1])]
}
par_best <- list(k = model_best)
tm_train=NA
Sys.time()
tm_train <- system.time(fit_train <- train(dat_train, par_best))
par_best[[1]]
source("../lib/train_knn.R")
source("../lib/train_knn.R")
tm_train=NA
Sys.time()
tm_train <- system.time(fit_train <- train(dat_train, par_best))
tm_test=NA
if(run.test){
#load(file="../output/fit_train.RData")
tm_test <- system.time(pred <- test(model_best, dat_test))
}
accu <- mean(dat_test$emotion_idx == pred)
cat("The accuracy of model:", model_labels[which.min(err_cv[,1])], "is", accu*100, "%.\n")
library(caret)
confusionMatrix(pred, dat_test$emotion_idx)
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
#cat("Time for training model=", tm_train[1], "s \n")
cat("Time for testing model=", tm_test[1], "s \n")
info <- read.csv("../data/train_set/label.csv")
load("../output/fiducial_pt_list.Rdata")
library(readxl)
# A function to plot histogram of distribution of pairwise distance for each emotion
# input: emotion index, first point, second point, vertical or horizontal distance
# output: histogram of distance distribution
dist_histogram_by_emotion <- function(emotion_idx, pt1, pt2, vertical = T){
indices <- info[info$emotion_idx == emotion_idx, 'Index']
emotion <- as.character(info[info$emotion_idx == emotion_idx, 'emotion_cat'])[1]
ver.dist <- function(idx){
if(vertical){
ver.loc <- fiducial_pt_list[[idx]][,2]
}
else{
ver.loc <- fiducial_pt_list[[idx]][,1]
}
pairwise_dist <- as.matrix(dist(ver.loc))
ver.dist <- pairwise_dist[pt1,pt2]
return(ver.dist)
}
dist_distribution <- sapply(indices, ver.dist)
#jpeg(paste(c('../output/hist', emotion_idx,"_", pt1, "_", pt2, '.jpg'), collapse = ''),
#width = 500, height = 375)
hist(dist_distribution, xlab = "distance",
main = paste(c(emotion, "distance between", pt1, "and", pt2),collapse = " "))
abline(v = mean(dist_distribution))
#dev.off()
}
# A function to generalize "dist_histogram_by_emotion" to all emotions
dist_histogram <- function(pt1, pt2, vertical = T){
lapply(1:22, dist_histogram_by_emotion, pt1, pt2, vertical)
}
#examples
dist_histogram(50,52)
dist_histogram(1,21)
library(EBImage)
# a function display fiducial points on images
# input: identity index
# output: all images associated with the identity with fiducial points marked
display_fid_pt <- function(identity){
indices <- info[info$identity == identity, 'Index']
emotions <- as.character(info[info$identity == identity, 'emotion_cat'])
image.path_sub <- paste0(train_image_dir, sprintf("%04d", indices), ".jpg")
Image_list_sub <- lapply(image.path_sub, EBImage::readImage)
fiducial_pt_list_sub <- fiducial_pt_list[indices]
display_single <- function(j){
#jpeg(paste(c('../output/', identity,'_', j, '.jpg'), collapse = ''), width = 500, height = 375)
display(Image(Image_list_sub[[j]], colormode = 'Color'), method="raster")
text(x = 170, y = 50, label = emotions[j], cex = 1.5)
add_point <- function(n){text(x = fiducial_pt_list_sub[[j]][n,1],
y = fiducial_pt_list_sub[[j]][n,2],
label = as.character(n), col = "white", cex = 0.8)}
lapply(1:78,add_point)
#dev.off()
}
lapply(1:length(indices), display_single)
}
display_fid_pt(110)
View(info)
emotion_idx = 1
indices <- info[info$emotion_idx == emotion_idx, 'Index']
emotion <- as.character(info[info$emotion_idx == emotion_idx, 'emotion_cat'])[1]
emotion <- as.character(info[info$emotion_idx == emotion_idx, 'emotion_cat'])
emotion <- as.character(info[info$emotion_idx == emotion_idx, 'emotion_cat'])[1]
a = fiducial_pt_list[[1]]
a
